// Sermon.java
package com.RunDMCPP.Backend.models;
import java.util.Objects;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;

// Class representing a sermon, stored in the sermons table in DynamoDB
@DynamoDBTable(tableName = "sermon")
public class Sermon {

    private String id;          // Unique identifier for the sermon
    private String name;        // Name of the sermon
    private String description; // Description of the sermon
    private String youtubeLink; // Link to the sermon on YouTube
    private String dateTime;    // Date and time of the sermon

    // Getters and Setters
    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBAttribute(attributeName = "name")
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }

    @DynamoDBAttribute(attributeName = "description")
    public String getDescription() {
        return description;
    }
    public void setDescription(String description) {
        this.description = description;
    }

    @DynamoDBAttribute(attributeName = "youtubeLink")
    public String getYoutubeLink() {
        return youtubeLink;
    }
    public void setYoutubeLink(String youtubeLink) {
        this.youtubeLink = youtubeLink;
    }

    @DynamoDBAttribute(attributeName = "dateTime")
    public String getDateTime() {
        return dateTime;
    }
    public void setDateTime(String dateTime) {
        this.dateTime = dateTime;
    }

    // Overrides the 'equals' method to compare sermons based on their properties, not just memory address.
    @Override
    public boolean equals(Object o) {
        // If they're the same instance, they're equal.
        if (this == o){
            return true;
        }
        // If they're null or not the same class, return false
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        // Cast the object to a Sermon and compare the properties
        Sermon sermon = (Sermon) o;
        return Objects.equals(this.id, sermon.id) && Objects.equals(this.name, sermon.name) && Objects.equals(this.description, sermon.description) && Objects.equals(this.youtubeLink, sermon.youtubeLink) && Objects.equals(this.dateTime, sermon.dateTime);
    }

    // Overrides the 'hashCode' method to generate a hash based on the sermon's properties, not just memory address.
    // Hash codes return an integer value that is used to speed up searches in collections.
    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.name, this.description, this.youtubeLink, this.dateTime);
    }
}
