package com.RunDMCPP.Backend.models;

import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;

import java.util.Objects;

// Class representing an event, stored in the events table in DynamoDB
@DynamoDBTable(tableName = "event")
public class Event {
    private String id;               // Unique identifier for the event 
    private String name;       // Title of the event
    private String eventDescription; // Description of the event
    private String eventDateTime;    // Date and time of the event
    private String eventLocation;    // Location of the event

    // Getters
    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return id;
    }
    @DynamoDBAttribute(attributeName = "title")
    public String getName() {
        return name;
    }
    @DynamoDBAttribute(attributeName = "description")
    public String getEventDescription() {
        return eventDescription;
    }
    @DynamoDBAttribute(attributeName = "dateTime")
    public String getDateTime() {
        return eventDateTime;
    }

    @DynamoDBAttribute(attributeName = "location")
    public String getEventLocation() {
        return eventLocation;
    }

    // Setters
    public void setId(String id) {
        this.id = id;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setEventDescription(String eventDescription) {
        this.eventDescription = eventDescription;
    }

    public void setDateTime(String eventDateTime) {
        this.eventDateTime = eventDateTime;
    }

    public void setEventLocation(String eventLocation) {
        this.eventLocation = eventLocation;
    }

    // Overrides the 'equals' method to compare events based on their properties, not just memory address.
    @Override
    public boolean equals(Object o) {
        // If the object is compared with itself then return true
        if (this == o){ 
            return true;
        }
        // If they're null or not the same class, return false
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        // Compare each attribute of the events to see if they're equal
        Event event = (Event) o;
        return Objects.equals(this.id, event.id) && Objects.equals(this.name, event.name) && Objects.equals(this.eventDescription, event.eventDescription) && 
        Objects.equals(this.eventDateTime, event.eventDateTime) && Objects.equals(this.eventLocation, event.eventLocation);
    }

    // Overrides the 'hashCode' method, which is used in collections like HashMaps.
    // Hash codes return an integer value that is used to speed up searches in collections.
    @Override
    public int hashCode() {
        // Generates a hash code using the event's attributes.
        return Objects.hash(this.id, this.name, this.eventDescription, this.eventDateTime, this.eventLocation);
    }
}
